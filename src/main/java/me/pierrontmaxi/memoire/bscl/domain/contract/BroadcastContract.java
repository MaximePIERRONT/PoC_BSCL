package me.pierrontmaxi.memoire.bscl.domain.contract;

import org.web3j.abi.FunctionEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.*;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.abi.datatypes.generated.Uint8;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.RemoteFunctionCall;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tuples.generated.Tuple5;
import org.web3j.tuples.generated.Tuple7;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

import java.math.BigInteger;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.Callable;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 1.5.0.
 */
@SuppressWarnings("rawtypes")
public class BroadcastContract extends Contract {
    public static final String BINARY = "608060405260006008553480156200001657600080fd5b506040516200405f3803806200405f83398181016040528101906200003c91906200016f565b33600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050620001a1565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600062000137826200010a565b9050919050565b62000149816200012a565b81146200015557600080fd5b50565b60008151905062000169816200013e565b92915050565b60006020828403121562000188576200018762000105565b5b6000620001988482850162000158565b91505092915050565b613eae80620001b16000396000f3fe608060405234801561001057600080fd5b50600436106101575760003560e01c80637adbf973116100c3578063acb5acaf1161007c578063acb5acaf14610424578063b5ecf91214610440578063c5da352f14610474578063d16c4a8c146104a4578063dee9a71d146104ae578063e8532b5f146104ca57610157565b80637adbf973146103505780637d558d681461036c5780637dc0d1d01461039c5780638c89dc0a146103ba57806393a5c666146103d85780639afbf9ba1461040857610157565b80634fc569b6116101155780634fc569b6146102585780635874296714610288578063604ca107146102a4578063618b1bc4146102c05780636735d535146102f05780636c682a6d1461032057610157565b806226f3e91461015c5780630b7ad54c1461018c578063104b7585146101bc57806323677ae2146101ec57806331d2cb121461020a5780634f1305ba1461023a575b600080fd5b61017660048036038101906101719190612872565b610500565b6040516101839190612904565b60405180910390f35b6101a660048036038101906101a1919061291f565b6107c8565b6040516101b39190612ab3565b60405180910390f35b6101d660048036038101906101d19190612b01565b6109a3565b6040516101e39190612d16565b60405180910390f35b6101f4610df1565b6040516102019190612e77565b60405180910390f35b610224600480360381019061021f919061291f565b610fef565b6040516102319190612ee3565b60405180910390f35b61024261116a565b60405161024f9190612f64565b60405180910390f35b610272600480360381019061026d9190612f7f565b611190565b60405161027f9190612e77565b60405180910390f35b6102a2600480360381019061029d9190612fac565b611571565b005b6102be60048036038101906102b9919061291f565b61161e565b005b6102da60048036038101906102d59190612fac565b611729565b6040516102e79190612904565b60405180910390f35b61030a60048036038101906103059190612f7f565b61175a565b6040516103179190612ffb565b60405180910390f35b61033a60048036038101906103359190612f7f565b61178d565b6040516103479190612d16565b60405180910390f35b61036a60048036038101906103659190612f7f565b611b0b565b005b61038660048036038101906103819190613016565b611bdc565b6040516103939190612904565b60405180910390f35b6103a4611e3f565b6040516103b19190612ffb565b60405180910390f35b6103c2611e63565b6040516103cf9190612904565b60405180910390f35b6103f260048036038101906103ed91906130a1565b611e69565b6040516103ff9190612904565b60405180910390f35b610422600480360381019061041d919061291f565b611e9a565b005b61043e6004803603810190610439919061291f565b612029565b005b61045a6004803603810190610455919061291f565b612134565b60405161046b9594939291906130f0565b60405180910390f35b61048e600480360381019061048991906130a1565b6122b7565b60405161049b9190612904565b60405180910390f35b6104ac6122e8565b005b6104c860048036038101906104c39190612f7f565b6124be565b005b6104e460048036038101906104df919061291f565b61253f565b6040516104f79796959493929190613160565b60405180910390f35b60008073ffffffffffffffffffffffffffffffffffffffff16600960003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16036105cf576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105c690613248565b60405180910390fd5b60006040518060e001604052803373ffffffffffffffffffffffffffffffffffffffff1681526020018781526020016000600381111561061257610611612b6d565b5b8152602001600081526020018481526020018681526020018581525090506008600081548092919061064390613297565b91905055508060056000600854815260200190815260200160002060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506020820151816001015560408201518160020160006101000a81548160ff021916908360038111156106da576106d9612b6d565b5b02179055506060820151816003015560808201518160040190816106fe91906134e1565b5060a0820151816005015560c08201518160060155905050600660008781526020019081526020016000206008549080600181540180825580915050600190039060005260206000200160009091909190915055600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206008549080600181540180825580915050600190039060005260206000200160009091909190915055600854915050949350505050565b6107d0612636565b600382815481106107e4576107e36135b3565b5b90600052602060002090600502016040518060a00160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820154815260200160028201805461086d9061330e565b80601f01602080910402602001604051908101604052809291908181526020018280546108999061330e565b80156108e65780601f106108bb576101008083540402835291602001916108e6565b820191906000526020600020905b8154815290600101906020018083116108c957829003601f168201915b505050505081526020016003820180546108ff9061330e565b80601f016020809104026020016040519081016040528092919081815260200182805461092b9061330e565b80156109785780601f1061094d57610100808354040283529160200191610978565b820191906000526020600020905b81548152906001019060200180831161095b57829003601f168201915b505050505081526020016004820160009054906101000a900460ff1615151515815250509050919050565b6060600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161480610a2c57508173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b610a6b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a6290613654565b60405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff1660038481548110610a9657610a956135b3565b5b906000526020600020906005020160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610b1e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b15906136e6565b60405180910390fd5b600380549050831115610b66576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b5d90613752565b60405180910390fd5b600060066000858152602001908152602001600020805480602002602001604051908101604052809291908181526020018280548015610bc557602002820191906000526020600020905b815481526020019060010190808311610bb1575b505050505090506000815167ffffffffffffffff811115610be957610be8612747565b5b604051908082528060200260200182016040528015610c2257816020015b610c0f61267d565b815260200190600190039081610c075790505b50905060005b8251811015610de55760056000848381518110610c4857610c476135b3565b5b602002602001015181526020019081526020016000206040518060e00160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600182015481526020016002820160009054906101000a900460ff166003811115610cee57610ced612b6d565b5b6003811115610d0057610cff612b6d565b5b815260200160038201548152602001600482018054610d1e9061330e565b80601f0160208091040260200160405190810160405280929190818152602001828054610d4a9061330e565b8015610d975780601f10610d6c57610100808354040283529160200191610d97565b820191906000526020600020905b815481529060010190602001808311610d7a57829003601f168201915b5050505050815260200160058201548152602001600682015481525050828281518110610dc757610dc66135b3565b5b60200260200101819052508080610ddd90613297565b915050610c28565b50809250505092915050565b60606003805480602002602001604051908101604052809291908181526020016000905b82821015610fe657838290600052602060002090600502016040518060a00160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160018201548152602001600282018054610ea89061330e565b80601f0160208091040260200160405190810160405280929190818152602001828054610ed49061330e565b8015610f215780601f10610ef657610100808354040283529160200191610f21565b820191906000526020600020905b815481529060010190602001808311610f0457829003601f168201915b50505050508152602001600382018054610f3a9061330e565b80601f0160208091040260200160405190810160405280929190818152602001828054610f669061330e565b8015610fb35780601f10610f8857610100808354040283529160200191610fb3565b820191906000526020600020905b815481529060010190602001808311610f9657829003601f168201915b505050505081526020016004820160009054906101000a900460ff16151515158152505081526020019060010190610e15565b50505050905090565b6060600854821115611036576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161102d906137be565b60405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146110c4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110bb90613850565b60405180910390fd5b6005600083815260200190815260200160002060040180546110e59061330e565b80601f01602080910402602001604051908101604052809291908181526020018280546111119061330e565b801561115e5780601f106111335761010080835404028352916020019161115e565b820191906000526020600020905b81548152906001019060200180831161114157829003601f168201915b50505050509050919050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6060600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16148061121957508173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b611258576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161124f906138e2565b60405180910390fd5b6000600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208054806020026020016040519081016040528092919081815260200182805480156112e357602002820191906000526020600020905b8154815260200190600101908083116112cf575b505050505090506000815167ffffffffffffffff81111561130757611306612747565b5b60405190808252806020026020018201604052801561134057816020015b61132d612636565b8152602001906001900390816113255790505b50905060005b8251811015611566576003838281518110611364576113636135b3565b5b60200260200101518154811061137d5761137c6135b3565b5b90600052602060002090600502016040518060a00160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600182015481526020016002820180546114069061330e565b80601f01602080910402602001604051908101604052809291908181526020018280546114329061330e565b801561147f5780601f106114545761010080835404028352916020019161147f565b820191906000526020600020905b81548152906001019060200180831161146257829003601f168201915b505050505081526020016003820180546114989061330e565b80601f01602080910402602001604051908101604052809291908181526020018280546114c49061330e565b80156115115780601f106114e657610100808354040283529160200191611511565b820191906000526020600020905b8154815290600101906020018083116114f457829003601f168201915b505050505081526020016004820160009054906101000a900460ff161515151581525050828281518110611548576115476135b3565b5b6020026020010181905250808061155e90613297565b915050611346565b508092505050919050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146115ff576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115f690613974565b60405180910390fd5b8060056000848152602001908152602001600020600301819055505050565b6003600560008381526020019081526020016000206001015481548110611648576116476135b3565b5b906000526020600020906005020160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146116e7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116de90613a06565b60405180910390fd5b60016005600083815260200190815260200160002060020160006101000a81548160ff0219169083600381111561172157611720612b6d565b5b021790555050565b6006602052816000526040600020818154811061174557600080fd5b90600052602060002001600091509150505481565b60096020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6060600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16148061181657508173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b611855576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161184c906138e2565b60405180910390fd5b6000600760008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208054806020026020016040519081016040528092919081815260200182805480156118e057602002820191906000526020600020905b8154815260200190600101908083116118cc575b505050505090506000815167ffffffffffffffff81111561190457611903612747565b5b60405190808252806020026020018201604052801561193d57816020015b61192a61267d565b8152602001906001900390816119225790505b50905060005b8251811015611b005760056000848381518110611963576119626135b3565b5b602002602001015181526020019081526020016000206040518060e00160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600182015481526020016002820160009054906101000a900460ff166003811115611a0957611a08612b6d565b5b6003811115611a1b57611a1a612b6d565b5b815260200160038201548152602001600482018054611a399061330e565b80601f0160208091040260200160405190810160405280929190818152602001828054611a659061330e565b8015611ab25780601f10611a8757610100808354040283529160200191611ab2565b820191906000526020600020905b815481529060010190602001808311611a9557829003601f168201915b5050505050815260200160058201548152602001600682015481525050828281518110611ae257611ae16135b3565b5b60200260200101819052508080611af890613297565b915050611943565b508092505050919050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611b99576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b9090613a98565b60405180910390fd5b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000808411611c20576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c1790613b04565b60405180910390fd5b6000835111611c64576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c5b90613b70565b60405180910390fd5b6000825111611ca8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c9f90613bdc565b60405180910390fd5b60006040518060a001604052803373ffffffffffffffffffffffffffffffffffffffff168152602001868152602001858152602001848152602001600115158152509050600381908060018154018082558091505060019003906000526020600020906005020160009091909190915060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550602082015181600101556040820151816002019081611d7e91906134e1565b506060820151816003019081611d9491906134e1565b5060808201518160040160006101000a81548160ff021916908315150217905550505060006001600380549050611dcb9190613bfc565b9050600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081908060018154018082558091505060019003906000526020600020016000909190919091505580925050509392505050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60085481565b60076020528160005260406000208181548110611e8557600080fd5b90600052602060002001600091509150505481565b60038181548110611eae57611ead6135b3565b5b906000526020600020906005020160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611f4d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f4490613ca2565b60405180910390fd5b60005b600854811015611fe757816005600083815260200190815260200160002060010154148015611f945750426005600083815260200190815260200160002060060154115b15611fd4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611fcb90613d34565b60405180910390fd5b8080611fdf90613297565b915050611f50565b50600060038281548110611ffe57611ffd6135b3565b5b906000526020600020906005020160040160006101000a81548160ff02191690831515021790555050565b6003600560008381526020019081526020016000206001015481548110612053576120526135b3565b5b906000526020600020906005020160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146120f2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016120e990613dc6565b60405180910390fd5b60026005600083815260200190815260200160002060020160006101000a81548160ff0219169083600381111561212c5761212b612b6d565b5b021790555050565b6003818154811061214457600080fd5b90600052602060002090600502016000915090508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060010154908060020180546121939061330e565b80601f01602080910402602001604051908101604052809291908181526020018280546121bf9061330e565b801561220c5780601f106121e15761010080835404028352916020019161220c565b820191906000526020600020905b8154815290600101906020018083116121ef57829003601f168201915b5050505050908060030180546122219061330e565b80601f016020809104026020016040519081016040528092919081815260200182805461224d9061330e565b801561229a5780601f1061226f5761010080835404028352916020019161229a565b820191906000526020600020905b81548152906001019060200180831161227d57829003601f168201915b5050505050908060040160009054906101000a900460ff16905085565b600460205281600052604060002081815481106122d357600080fd5b90600052602060002001600091509150505481565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614612378576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161236f90613e58565b60405180910390fd5b6000600190505b60085481116124bb576000600560008381526020019081526020016000209050600160038111156123b3576123b2612b6d565b5b8160020160009054906101000a900460ff1660038111156123d7576123d6612b6d565b5b1480156123e75750428160060154105b156124a757600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f4851eab836040518263ffffffff1660e01b81526004016124479190612904565b600060405180830381600087803b15801561246157600080fd5b505af1158015612475573d6000803e3d6000fd5b5050505060038160020160006101000a81548160ff021916908360038111156124a1576124a0612b6d565b5b02179055505b5080806124b390613297565b91505061237f565b50565b80600960003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60056020528060005260406000206000915090508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060010154908060020160009054906101000a900460ff16908060030154908060040180546125a79061330e565b80601f01602080910402602001604051908101604052809291908181526020018280546125d39061330e565b80156126205780601f106125f557610100808354040283529160200191612620565b820191906000526020600020905b81548152906001019060200180831161260357829003601f168201915b5050505050908060050154908060060154905087565b6040518060a00160405280600073ffffffffffffffffffffffffffffffffffffffff1681526020016000815260200160608152602001606081526020016000151581525090565b6040518060e00160405280600073ffffffffffffffffffffffffffffffffffffffff16815260200160008152602001600060038111156126c0576126bf612b6d565b5b8152602001600081526020016060815260200160008152602001600081525090565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b612709816126f6565b811461271457600080fd5b50565b60008135905061272681612700565b92915050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61277f82612736565b810181811067ffffffffffffffff8211171561279e5761279d612747565b5b80604052505050565b60006127b16126e2565b90506127bd8282612776565b919050565b600067ffffffffffffffff8211156127dd576127dc612747565b5b6127e682612736565b9050602081019050919050565b82818337600083830152505050565b6000612815612810846127c2565b6127a7565b90508281526020810184848401111561283157612830612731565b5b61283c8482856127f3565b509392505050565b600082601f8301126128595761285861272c565b5b8135612869848260208601612802565b91505092915050565b6000806000806080858703121561288c5761288b6126ec565b5b600061289a87828801612717565b94505060206128ab87828801612717565b93505060406128bc87828801612717565b925050606085013567ffffffffffffffff8111156128dd576128dc6126f1565b5b6128e987828801612844565b91505092959194509250565b6128fe816126f6565b82525050565b600060208201905061291960008301846128f5565b92915050565b600060208284031215612935576129346126ec565b5b600061294384828501612717565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006129778261294c565b9050919050565b6129878161296c565b82525050565b612996816126f6565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b838110156129d65780820151818401526020810190506129bb565b60008484015250505050565b60006129ed8261299c565b6129f781856129a7565b9350612a078185602086016129b8565b612a1081612736565b840191505092915050565b60008115159050919050565b612a3081612a1b565b82525050565b600060a083016000830151612a4e600086018261297e565b506020830151612a61602086018261298d565b5060408301518482036040860152612a7982826129e2565b91505060608301518482036060860152612a9382826129e2565b9150506080830151612aa86080860182612a27565b508091505092915050565b60006020820190508181036000830152612acd8184612a36565b905092915050565b612ade8161296c565b8114612ae957600080fd5b50565b600081359050612afb81612ad5565b92915050565b60008060408385031215612b1857612b176126ec565b5b6000612b2685828601612717565b9250506020612b3785828601612aec565b9150509250929050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60048110612bad57612bac612b6d565b5b50565b6000819050612bbe82612b9c565b919050565b6000612bce82612bb0565b9050919050565b612bde81612bc3565b82525050565b600060e083016000830151612bfc600086018261297e565b506020830151612c0f602086018261298d565b506040830151612c226040860182612bd5565b506060830151612c35606086018261298d565b5060808301518482036080860152612c4d82826129e2565b91505060a0830151612c6260a086018261298d565b5060c0830151612c7560c086018261298d565b508091505092915050565b6000612c8c8383612be4565b905092915050565b6000602082019050919050565b6000612cac82612b41565b612cb68185612b4c565b935083602082028501612cc885612b5d565b8060005b85811015612d045784840389528151612ce58582612c80565b9450612cf083612c94565b925060208a01995050600181019050612ccc565b50829750879550505050505092915050565b60006020820190508181036000830152612d308184612ca1565b905092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b600060a083016000830151612d7c600086018261297e565b506020830151612d8f602086018261298d565b5060408301518482036040860152612da782826129e2565b91505060608301518482036060860152612dc182826129e2565b9150506080830151612dd66080860182612a27565b508091505092915050565b6000612ded8383612d64565b905092915050565b6000602082019050919050565b6000612e0d82612d38565b612e178185612d43565b935083602082028501612e2985612d54565b8060005b85811015612e655784840389528151612e468582612de1565b9450612e5183612df5565b925060208a01995050600181019050612e2d565b50829750879550505050505092915050565b60006020820190508181036000830152612e918184612e02565b905092915050565b600082825260208201905092915050565b6000612eb58261299c565b612ebf8185612e99565b9350612ecf8185602086016129b8565b612ed881612736565b840191505092915050565b60006020820190508181036000830152612efd8184612eaa565b905092915050565b6000819050919050565b6000612f2a612f25612f208461294c565b612f05565b61294c565b9050919050565b6000612f3c82612f0f565b9050919050565b6000612f4e82612f31565b9050919050565b612f5e81612f43565b82525050565b6000602082019050612f796000830184612f55565b92915050565b600060208284031215612f9557612f946126ec565b5b6000612fa384828501612aec565b91505092915050565b60008060408385031215612fc357612fc26126ec565b5b6000612fd185828601612717565b9250506020612fe285828601612717565b9150509250929050565b612ff58161296c565b82525050565b60006020820190506130106000830184612fec565b92915050565b60008060006060848603121561302f5761302e6126ec565b5b600061303d86828701612717565b935050602084013567ffffffffffffffff81111561305e5761305d6126f1565b5b61306a86828701612844565b925050604084013567ffffffffffffffff81111561308b5761308a6126f1565b5b61309786828701612844565b9150509250925092565b600080604083850312156130b8576130b76126ec565b5b60006130c685828601612aec565b92505060206130d785828601612717565b9150509250929050565b6130ea81612a1b565b82525050565b600060a0820190506131056000830188612fec565b61311260208301876128f5565b81810360408301526131248186612eaa565b905081810360608301526131388185612eaa565b905061314760808301846130e1565b9695505050505050565b61315a81612bc3565b82525050565b600060e082019050613175600083018a612fec565b61318260208301896128f5565b61318f6040830188613151565b61319c60608301876128f5565b81810360808301526131ae8186612eaa565b90506131bd60a08301856128f5565b6131ca60c08301846128f5565b98975050505050505050565b7f42726f6164636173744f776e6572206973206e6f74206c696e6b656420746f2060008201527f616e7920536572766963652050726f7669646572000000000000000000000000602082015250565b6000613232603483612e99565b915061323d826131d6565b604082019050919050565b6000602082019050818103600083015261326181613225565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006132a2826126f6565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036132d4576132d3613268565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061332657607f821691505b602082108103613339576133386132df565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026133a17fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82613364565b6133ab8683613364565b95508019841693508086168417925050509392505050565b60006133de6133d96133d4846126f6565b612f05565b6126f6565b9050919050565b6000819050919050565b6133f8836133c3565b61340c613404826133e5565b848454613371565b825550505050565b600090565b613421613414565b61342c8184846133ef565b505050565b5b8181101561345057613445600082613419565b600181019050613432565b5050565b601f821115613495576134668161333f565b61346f84613354565b8101602085101561347e578190505b61349261348a85613354565b830182613431565b50505b505050565b600082821c905092915050565b60006134b86000198460080261349a565b1980831691505092915050565b60006134d183836134a7565b9150826002028217905092915050565b6134ea8261299c565b67ffffffffffffffff81111561350357613502612747565b5b61350d825461330e565b613518828285613454565b600060209050601f83116001811461354b5760008415613539578287015190505b61354385826134c5565b8655506135ab565b601f1984166135598661333f565b60005b828110156135815784890151825560018201915060208501945060208101905061355c565b8683101561359e578489015161359a601f8916826134a7565b8355505b6001600288020188555050505b505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4f6e6c79206f776e6572206f7220757365722063616e206765742062726f616460008201527f636173747320627920636f6e74656e7420696400000000000000000000000000602082015250565b600061363e603383612e99565b9150613649826135e2565b604082019050919050565b6000602082019050818103600083015261366d81613631565b9050919050565b7f4f6e6c792070726f6475636572206f662074686520636f6e74656e742063616e60008201527f206765742062726f6164636173747320627920636f6e74656e74206964000000602082015250565b60006136d0603d83612e99565b91506136db82613674565b604082019050919050565b600060208201905081810360008301526136ff816136c3565b9050919050565b7f436f6e74656e7420646f6573206e6f7420657869737400000000000000000000600082015250565b600061373c601683612e99565b915061374782613706565b602082019050919050565b6000602082019050818103600083015261376b8161372f565b9050919050565b7f42726f61646361737420646f6573206e6f742065786973740000000000000000600082015250565b60006137a8601883612e99565b91506137b382613772565b602082019050919050565b600060208201905081810360008301526137d78161379b565b9050919050565b7f4f6e6c79206f7261636c652063616e206765742062726f61646361737420627960008201527f2069640000000000000000000000000000000000000000000000000000000000602082015250565b600061383a602383612e99565b9150613845826137de565b604082019050919050565b600060208201905081810360008301526138698161382d565b9050919050565b7f4f6e6c79206f776e6572206f7220757365722063616e2067657420636f6e746560008201527f6e74732062792070726f64756365720000000000000000000000000000000000602082015250565b60006138cc602f83612e99565b91506138d782613870565b604082019050919050565b600060208201905081810360008301526138fb816138bf565b9050919050565b7f4f6e6c79206f7261636c652063616e207570646174652076696577657220636f60008201527f756e740000000000000000000000000000000000000000000000000000000000602082015250565b600061395e602383612e99565b915061396982613902565b604082019050919050565b6000602082019050818103600083015261398d81613951565b9050919050565b7f4f6e6c792070726f6475636572206f662074686520636f6e74656e742063616e60008201527f20617070726f76652062726f6164636173740000000000000000000000000000602082015250565b60006139f0603283612e99565b91506139fb82613994565b604082019050919050565b60006020820190508181036000830152613a1f816139e3565b9050919050565b7f4f6e6c79206f7261636c652063616e2073657420746865206e6577206f72616360008201527f6c65206164647265737300000000000000000000000000000000000000000000602082015250565b6000613a82602a83612e99565b9150613a8d82613a26565b604082019050919050565b60006020820190508181036000830152613ab181613a75565b9050919050565b7f5072696365206d7573742062652067726561746572207468616e203000000000600082015250565b6000613aee601c83612e99565b9150613af982613ab8565b602082019050919050565b60006020820190508181036000830152613b1d81613ae1565b9050919050565b7f436f6e7472616374206c696e6b2063616e6e6f7420626520656d707479000000600082015250565b6000613b5a601d83612e99565b9150613b6582613b24565b602082019050919050565b60006020820190508181036000830152613b8981613b4d565b9050919050565b7f436f6e747261637420686173682063616e6e6f7420626520656d707479000000600082015250565b6000613bc6601d83612e99565b9150613bd182613b90565b602082019050919050565b60006020820190508181036000830152613bf581613bb9565b9050919050565b6000613c07826126f6565b9150613c12836126f6565b9250828203905081811115613c2a57613c29613268565b5b92915050565b7f4f6e6c792070726f6475636572206f662074686520636f6e74656e742063616e60008201527f2073657420636f6e74656e7420756e617661696c61626c650000000000000000602082015250565b6000613c8c603883612e99565b9150613c9782613c30565b604082019050919050565b60006020820190508181036000830152613cbb81613c7f565b9050919050565b7f43616e6e6f742064656c65746520636f6e74656e74207769746820616374697660008201527f652062726f616463617374730000000000000000000000000000000000000000602082015250565b6000613d1e602c83612e99565b9150613d2982613cc2565b604082019050919050565b60006020820190508181036000830152613d4d81613d11565b9050919050565b7f4f6e6c792070726f6475636572206f662074686520636f6e74656e742063616e60008201527f2072656a6563742062726f616463617374000000000000000000000000000000602082015250565b6000613db0603183612e99565b9150613dbb82613d54565b604082019050919050565b60006020820190508181036000830152613ddf81613da3565b9050919050565b7f4f6e6c79206f776e65722063616e207465726d696e6174652062726f6164636160008201527f7374730000000000000000000000000000000000000000000000000000000000602082015250565b6000613e42602383612e99565b9150613e4d82613de6565b604082019050919050565b60006020820190508181036000830152613e7181613e35565b905091905056fea2646970667358221220f7be3c75d04e9c0641b134941095bc014a24fd9b1e03c33ddee1d37198f41f4864736f6c63430008120033";

    public static final String FUNC_APPROVEBROADCAST = "approveBroadcast";

    public static final String FUNC_BROADCASTOWNERSERVICEPROVIDERMAPPING = "broadcastOwnerServiceProviderMapping";

    public static final String FUNC_BROADCASTS = "broadcasts";

    public static final String FUNC_BROADCASTSBYCONTENTID = "broadcastsByContentId";

    public static final String FUNC_BROADCASTSBYOWNER = "broadcastsByOwner";

    public static final String FUNC_BROADCASTSCOUNT = "broadcastsCount";

    public static final String FUNC_CHECKANDTERMINATEALLBROADCASTS = "checkAndTerminateAllBroadcasts";

    public static final String FUNC_CONTENTS = "contents";

    public static final String FUNC_CONTENTSBYPRODUCER = "contentsByProducer";

    public static final String FUNC_GETBROADCASTSBYCONTENTID = "getBroadcastsByContentId";

    public static final String FUNC_GETCONTENT = "getContent";

    public static final String FUNC_GETCONTENTS = "getContents";

    public static final String FUNC_GETMYBROADCASTS = "getMyBroadcasts";

    public static final String FUNC_GETMYCONTENTS = "getMyContents";

    public static final String FUNC_GETVIDEOIDFROMBROADCAST = "getVideoIdFromBroadcast";

    public static final String FUNC_LINKBROADCASTOWNERTOSERVICEPROVIDER = "linkBroadcastOwnerToServiceProvider";

    public static final String FUNC_ORACLE = "oracle";

    public static final String FUNC_PURCHASECONTENT = "purchaseContent";

    public static final String FUNC_REGISTERCONTENT = "registerContent";

    public static final String FUNC_REJECTBROADCAST = "rejectBroadcast";

    public static final String FUNC_SETORACLE = "setOracle";

    public static final String FUNC_SETUNAVAILABLECONTENT = "setUnavailableContent";

    public static final String FUNC_UPDATEVIEWERCOUNT = "updateViewerCount";

    public static final String FUNC_YOUTUBEORACLE = "youtubeOracle";

    @Deprecated
    protected BroadcastContract(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected BroadcastContract(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected BroadcastContract(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected BroadcastContract(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public RemoteFunctionCall<TransactionReceipt> approveBroadcast(BigInteger _broadcastId) {
        final Function function = new Function(
                FUNC_APPROVEBROADCAST,
                Arrays.<Type>asList(new Uint256(_broadcastId)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<String> broadcastOwnerServiceProviderMapping(String param0) {
        final Function function = new Function(FUNC_BROADCASTOWNERSERVICEPROVIDERMAPPING,
                Arrays.<Type>asList(new Address(160, param0)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<Tuple7<String, BigInteger, BigInteger, BigInteger, String, BigInteger, BigInteger>> broadcasts(BigInteger param0) {
        final Function function = new Function(FUNC_BROADCASTS,
                Arrays.<Type>asList(new Uint256(param0)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint8>() {}, new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        return new RemoteFunctionCall<Tuple7<String, BigInteger, BigInteger, BigInteger, String, BigInteger, BigInteger>>(function,
                new Callable<Tuple7<String, BigInteger, BigInteger, BigInteger, String, BigInteger, BigInteger>>() {
                    @Override
                    public Tuple7<String, BigInteger, BigInteger, BigInteger, String, BigInteger, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple7<String, BigInteger, BigInteger, BigInteger, String, BigInteger, BigInteger>(
                                (String) results.get(0).getValue(),
                                (BigInteger) results.get(1).getValue(),
                                (BigInteger) results.get(2).getValue(),
                                (BigInteger) results.get(3).getValue(),
                                (String) results.get(4).getValue(),
                                (BigInteger) results.get(5).getValue(),
                                (BigInteger) results.get(6).getValue());
                    }
                });
    }

    public RemoteFunctionCall<BigInteger> broadcastsByContentId(BigInteger param0, BigInteger param1) {
        final Function function = new Function(FUNC_BROADCASTSBYCONTENTID,
                Arrays.<Type>asList(new Uint256(param0),
                        new Uint256(param1)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> broadcastsByOwner(String param0, BigInteger param1) {
        final Function function = new Function(FUNC_BROADCASTSBYOWNER,
                Arrays.<Type>asList(new Address(160, param0),
                        new Uint256(param1)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> broadcastsCount() {
        final Function function = new Function(FUNC_BROADCASTSCOUNT,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<TransactionReceipt> checkAndTerminateAllBroadcasts() {
        final Function function = new Function(
                FUNC_CHECKANDTERMINATEALLBROADCASTS,
                Arrays.<Type>asList(),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Tuple5<String, BigInteger, String, String, Boolean>> contents(BigInteger param0) {
        final Function function = new Function(FUNC_CONTENTS,
                Arrays.<Type>asList(new Uint256(param0)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Bool>() {}));
        return new RemoteFunctionCall<Tuple5<String, BigInteger, String, String, Boolean>>(function,
                new Callable<Tuple5<String, BigInteger, String, String, Boolean>>() {
                    @Override
                    public Tuple5<String, BigInteger, String, String, Boolean> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple5<String, BigInteger, String, String, Boolean>(
                                (String) results.get(0).getValue(),
                                (BigInteger) results.get(1).getValue(),
                                (String) results.get(2).getValue(),
                                (String) results.get(3).getValue(),
                                (Boolean) results.get(4).getValue());
                    }
                });
    }

    public RemoteFunctionCall<BigInteger> contentsByProducer(String param0, BigInteger param1) {
        final Function function = new Function(FUNC_CONTENTSBYPRODUCER,
                Arrays.<Type>asList(new Address(160, param0),
                        new Uint256(param1)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<List<Broadcast>> getBroadcastsByContentId(BigInteger _contentId, String _user) {
        final Function function = new Function(FUNC_GETBROADCASTSBYCONTENTID,
                List.of(new Uint256(_contentId), new Address(160, _user)),
                List.of(new TypeReference<DynamicArray<Broadcast>>() {
                }));
        return new RemoteFunctionCall<>(function,
                () -> {
                    List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                    return convertToNative(result);
                });
    }

    public RemoteFunctionCall<Content> getContent(BigInteger _contentId) {
        final Function function = new Function(FUNC_GETCONTENT,
                Arrays.<Type>asList(new Uint256(_contentId)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Content>() {}));
        return executeRemoteCallSingleValueReturn(function, Content.class);
    }

    public RemoteFunctionCall<List> getContents() {
        final Function function = new Function(FUNC_GETCONTENTS,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Content>>() {}));
        return new RemoteFunctionCall<List>(function,
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteFunctionCall<List> getMyBroadcasts(String user) {
        final Function function = new Function(FUNC_GETMYBROADCASTS,
                Arrays.<Type>asList(new Address(160, user)),
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Broadcast>>() {}));
        return new RemoteFunctionCall<List>(function,
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteFunctionCall<List> getMyContents(String user) {
        final Function function = new Function(FUNC_GETMYCONTENTS,
                List.of(new Address(160, user)),
                List.of(new TypeReference<DynamicArray<Content>>() {
                }));

        return new RemoteFunctionCall<>(function,
                () -> {
                    List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                    return convertToNative(result);
                });
    }

    public RemoteFunctionCall<String> getVideoIdFromBroadcast(BigInteger _broadcastId) {
        final Function function = new Function(FUNC_GETVIDEOIDFROMBROADCAST,
                Arrays.<Type>asList(new Uint256(_broadcastId)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<TransactionReceipt> linkBroadcastOwnerToServiceProvider(String _serviceProvider) {
        final Function function = new Function(
                FUNC_LINKBROADCASTOWNERTOSERVICEPROVIDER,
                Arrays.<Type>asList(new Address(160, _serviceProvider)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<String> oracle() {
        final Function function = new Function(FUNC_ORACLE,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<TransactionReceipt> purchaseContent(BigInteger _contentId, BigInteger _startDate, BigInteger _endDate, String _videoId) {
        final Function function = new Function(
                FUNC_PURCHASECONTENT,
                Arrays.<Type>asList(new Uint256(_contentId),
                        new Uint256(_startDate),
                        new Uint256(_endDate),
                        new Utf8String(_videoId)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> registerContent(BigInteger _price, String _contractLink, String _contractHash) {
        final Function function = new Function(
                FUNC_REGISTERCONTENT,
                Arrays.<Type>asList(new Uint256(_price),
                        new Utf8String(_contractLink),
                        new Utf8String(_contractHash)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> rejectBroadcast(BigInteger _broadcastId) {
        final Function function = new Function(
                FUNC_REJECTBROADCAST,
                Arrays.<Type>asList(new Uint256(_broadcastId)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> setOracle(String _oracle) {
        final Function function = new Function(
                FUNC_SETORACLE,
                Arrays.<Type>asList(new Address(160, _oracle)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> setUnavailableContent(BigInteger _contentId) {
        final Function function = new Function(
                FUNC_SETUNAVAILABLECONTENT,
                Arrays.<Type>asList(new Uint256(_contentId)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> updateViewerCount(BigInteger _broadcastId, BigInteger _viewers) {
        final Function function = new Function(
                FUNC_UPDATEVIEWERCOUNT,
                Arrays.<Type>asList(new Uint256(_broadcastId),
                        new Uint256(_viewers)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<String> youtubeOracle() {
        final Function function = new Function(FUNC_YOUTUBEORACLE,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    @Deprecated
    public static BroadcastContract load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new BroadcastContract(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static BroadcastContract load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new BroadcastContract(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static BroadcastContract load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new BroadcastContract(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static BroadcastContract load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new BroadcastContract(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<BroadcastContract> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider, String _oracle) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new Address(160, _oracle)));
        return deployRemoteCall(BroadcastContract.class, web3j, credentials, contractGasProvider, BINARY, encodedConstructor);
    }

    public static RemoteCall<BroadcastContract> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider, String _oracle) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new Address(160, _oracle)));
        return deployRemoteCall(BroadcastContract.class, web3j, transactionManager, contractGasProvider, BINARY, encodedConstructor);
    }

    @Deprecated
    public static RemoteCall<BroadcastContract> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit, String _oracle) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new Address(160, _oracle)));
        return deployRemoteCall(BroadcastContract.class, web3j, credentials, gasPrice, gasLimit, BINARY, encodedConstructor);
    }

    @Deprecated
    public static RemoteCall<BroadcastContract> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit, String _oracle) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new Address(160, _oracle)));
        return deployRemoteCall(BroadcastContract.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, encodedConstructor);
    }

}
